<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> | GoCotano</title>
  <link rel="stylesheet" href="/css/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="https://www.paypal.com/sdk/js?client-id=<%= process.env.PAYPAL_CLIENT_ID || 'YOUR_CLIENT_ID' %>&currency=USD"></script>
</head>
<body>
  <%- include('../partials/header') %>

  <div class="container" style="max-width: 800px;">
    <h1 style="color: var(--primary-blue); margin-bottom: 1rem;">Checkout</h1>

    <!-- Debug Info Banner (will be populated by JS) -->
    <div id="checkout-status" style="display: none; background: #e3f2fd; border-left: 4px solid var(--primary-blue); padding: 1rem; margin-bottom: 2rem; border-radius: var(--radius-md);">
      <p style="margin: 0; color: var(--primary-blue); font-weight: 600;">✓ Cart loaded successfully</p>
    </div>

    <div class="grid grid-2" style="gap: 2rem;">
      <!-- Delivery Details -->
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Delivery Details</h2>
        </div>
        <div class="card-body">
          <form id="checkout-form">
            <div class="form-group">
              <label class="form-label">Delivery Address</label>
              <input
                type="text"
                id="address-input"
                class="form-control"
                placeholder="Enter your delivery address"
                required
              >
              <input type="hidden" id="delivery-lat">
              <input type="hidden" id="delivery-lng">
            </div>

            <div class="form-group">
              <label class="form-label">Special Instructions (Optional)</label>
              <textarea
                class="form-control"
                rows="3"
                placeholder="e.g., Ring doorbell, Leave at door"
              ></textarea>
            </div>

            <div id="map" class="map-container" style="height: 250px; margin-bottom: 1rem;"></div>
          </form>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Order Summary</h2>
        </div>
        <div class="card-body">
          <div id="order-items"></div>

          <div style="border-top: 2px solid var(--primary-blue-lighter); padding-top: 1rem; margin-top: 1rem;">
            <div class="d-flex justify-between" style="margin-bottom: 0.5rem;">
              <span>Subtotal:</span>
              <span id="subtotal">₱0.00</span>
            </div>
            <div class="d-flex justify-between" style="margin-bottom: 0.5rem;">
              <span>Delivery Fee:</span>
              <span>₱50.00</span>
            </div>
            <div class="d-flex justify-between" style="font-size: 1.25rem; font-weight: 700; color: var(--primary-orange);">
              <span>Total:</span>
              <span id="total">₱0.00</span>
            </div>
          </div>

          <div id="paypal-button-container" style="margin-top: 1.5rem;"></div>

          <div style="text-align: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--gray);">
            <p style="color: var(--gray); font-size: 0.9rem; margin-bottom: 0.5rem;">Or</p>
            <button id="place-order-btn" class="btn btn-secondary w-100" style="padding: 1rem; font-size: 1.1rem;">
              Place Order (Pay on Delivery)
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script>
    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
    const restaurantId = localStorage.getItem('restaurantId');
    let map, marker;
    let deliveryLat, deliveryLng;
    let menuItemsData = {};

    // Debug localStorage
    console.log('=== CHECKOUT PAGE DEBUG ===');
    console.log('Cart items from localStorage:', cartItems);
    console.log('Restaurant ID from localStorage:', restaurantId);

    // Check if cart is empty and redirect back
    if (!cartItems || cartItems.length === 0) {
      console.error('ERROR: Cart is empty!');
      alert('⚠ Your cart is empty!\n\nThis could happen if:\n- You didn\'t add items to cart\n- Your browser cleared the data\n- You opened this page directly\n\nRedirecting you to restaurants...');
      window.location.href = '/restaurants';
    }

    if (!restaurantId) {
      console.error('ERROR: No restaurant ID!');
      alert('⚠ Restaurant information is missing!\n\nPlease go back and select a restaurant.');
      window.location.href = '/restaurants';
    }

    console.log('✓ Cart and restaurant data loaded successfully');

    // Show success banner
    const statusBanner = document.getElementById('checkout-status');
    if (statusBanner) {
      statusBanner.style.display = 'block';
      statusBanner.innerHTML = `<p style="margin: 0; color: var(--primary-blue); font-weight: 600;">✓ Cart loaded: ${cartItems.length} item(s) • Restaurant ID: ${restaurantId}</p>`;
    }

    // Initialize Leaflet Map with OpenStreetMap
    function initMap() {
      const defaultLocation = [14.5995, 120.9842]; // Manila, Philippines
      map = L.map('map').setView(defaultLocation, 13);

      // Use tile URL from environment/config
      const tileUrl = '<%= config.openStreetMap.tileUrl %>';
      L.tileLayer(tileUrl, {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 19
      }).addTo(map);

      marker = L.marker(defaultLocation, {
        draggable: true
      }).addTo(map);

      // Handle address input with Nominatim geocoding
      const input = document.getElementById('address-input');
      let searchTimeout;

      input.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          const address = input.value;
          if (address.length > 3) {
            geocodeAddress(address);
          }
        }, 500);
      });

      // Handle marker drag
      marker.on('dragend', (e) => {
        const position = marker.getLatLng();
        deliveryLat = position.lat;
        deliveryLng = position.lng;
        document.getElementById('delivery-lat').value = deliveryLat;
        document.getElementById('delivery-lng').value = deliveryLng;
      });
    }

    // Geocode address using Nominatim
    async function geocodeAddress(address) {
      try {
        // Use Nominatim URL from environment/config
        const nominatimUrl = '<%= config.openStreetMap.nominatimBaseUrl %>';
        const userAgent = '<%= config.openStreetMap.userAgent %>';

        const response = await fetch(
          `${nominatimUrl}/search?` +
          `q=${encodeURIComponent(address)}&` +
          `countrycodes=ph&format=json&limit=1`,
          {
            headers: {
              'User-Agent': userAgent
            }
          }
        );
        const data = await response.json();

        if (data && data.length > 0) {
          const result = data[0];
          const lat = parseFloat(result.lat);
          const lng = parseFloat(result.lon);

          map.setView([lat, lng], 15);
          marker.setLatLng([lat, lng]);
          deliveryLat = lat;
          deliveryLng = lng;
          document.getElementById('delivery-lat').value = lat;
          document.getElementById('delivery-lng').value = lng;
        }
      } catch (error) {
        console.error('Geocoding error:', error);
      }
    }

    // Fetch menu items data
    async function fetchMenuItems() {
      if (cartItems.length === 0) return;

      const itemIds = cartItems.map(item => item.menuItemId).join(',');
      try {
        const response = await fetch(`/restaurants/api/menu-items?ids=${itemIds}`);
        const data = await response.json();

        if (data.success) {
          data.items.forEach(item => {
            menuItemsData[item.id] = item;
          });
          calculateTotal();
        }
      } catch (error) {
        console.error('Failed to fetch menu items:', error);
      }
    }

    // Calculate order total
    function calculateTotal() {
      let subtotal = 0;

      // Calculate subtotal using real prices
      cartItems.forEach(item => {
        const menuItem = menuItemsData[item.menuItemId];
        if (menuItem) {
          subtotal += menuItem.price * item.quantity;
        }
      });

      const deliveryFee = 5;
      const total = subtotal + deliveryFee;

      document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
      document.getElementById('total').textContent = `$${total.toFixed(2)}`;

      // Display order items with names and real prices
      const itemsHtml = cartItems.map(item => {
        const menuItem = menuItemsData[item.menuItemId];
        const itemName = menuItem ? menuItem.name : `Item #${item.menuItemId}`;
        const itemPrice = menuItem ? menuItem.price * item.quantity : 0;

        return `
          <div class="d-flex justify-between" style="margin-bottom: 0.5rem;">
            <span>${item.quantity}x ${itemName}</span>
            <span>$${itemPrice.toFixed(2)}</span>
          </div>
        `;
      }).join('');
      document.getElementById('order-items').innerHTML = itemsHtml;

      return total;
    }

    // Initialize page
    async function initPage() {
      await fetchMenuItems();
      const total = calculateTotal();
      initializePayPal(total);
    }

    // Initialize PayPal
    function initializePayPal(total) {
      paypal.Buttons({
      createOrder: function(data, actions) {
        const address = document.getElementById('address-input').value;
        const lat = document.getElementById('delivery-lat').value;
        const lng = document.getElementById('delivery-lng').value;

        if (!address || !lat || !lng) {
          alert('Please enter a delivery address');
          return;
        }

        return actions.order.create({
          purchase_units: [{
            amount: {
              value: total.toFixed(2)
            }
          }]
        });
      },
      onApprove: function(data, actions) {
        return actions.order.capture().then(function(details) {
          // Create order in backend
          fetch('/orders/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              restaurantId: parseInt(restaurantId),
              items: cartItems,
              deliveryAddress: document.getElementById('address-input').value,
              deliveryLat: parseFloat(document.getElementById('delivery-lat').value),
              deliveryLng: parseFloat(document.getElementById('delivery-lng').value),
              paymentId: details.id
            })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              localStorage.removeItem('cartItems');
              localStorage.removeItem('restaurantId');
              alert('Order placed successfully! Order #' + data.orderNumber);
              window.location.href = '/orders/' + data.orderId;
            }
          });
        });
      },
      onError: function(err) {
        console.error('PayPal error:', err);
        alert('Payment failed. Please try again.');
      }
      }).render('#paypal-button-container');
    }

    // Initialize map and page on load
    initMap();
    initPage();

    // Place order without PayPal (Pay on Delivery)
    document.getElementById('place-order-btn')?.addEventListener('click', function() {
      const address = document.getElementById('address-input').value;
      const lat = document.getElementById('delivery-lat').value;
      const lng = document.getElementById('delivery-lng').value;

      if (!address || !lat || !lng) {
        alert('Please enter a delivery address and select location on map');
        return;
      }

      if (cartItems.length === 0) {
        alert('Your cart is empty');
        return;
      }

      // Disable button to prevent double submission
      this.disabled = true;
      this.textContent = 'Placing Order...';

      const orderData = {
        restaurantId: parseInt(restaurantId),
        items: cartItems,
        deliveryAddress: address,
        deliveryLat: parseFloat(lat),
        deliveryLng: parseFloat(lng),
        paymentMethod: 'CASH_ON_DELIVERY'
      };

      console.log('=== CLIENT-SIDE ORDER DEBUG ===');
      console.log('Order data being sent:', JSON.stringify(orderData, null, 2));
      console.log('Restaurant ID:', restaurantId);
      console.log('Cart items:', cartItems);

      // Create order in backend
      fetch('/orders/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData)
      })
      .then(async res => {
        const data = await res.json();
        if (!res.ok) {
          throw new Error(data.error || 'Failed to create order');
        }
        return data;
      })
      .then(data => {
        console.log('✓ Server response:', data);
        if (data.success) {
          console.log('✓ Order created! ID:', data.orderId, 'Number:', data.orderNumber);
          localStorage.removeItem('cartItems');
          localStorage.removeItem('restaurantId');
          alert('✓ Order placed successfully! Order #' + data.orderNumber + '\n\nYou can view your order in "My Orders".');
          console.log('Redirecting to order details page...');
          window.location.href = '/orders/' + data.orderId;
        } else {
          console.error('Order creation failed:', data.error);
          alert('Failed to place order: ' + (data.error || 'Unknown error'));
          this.disabled = false;
          this.textContent = 'Place Order (Pay on Delivery)';
        }
      })
      .catch(error => {
        console.error('Order creation error:', error);
        alert('Failed to place order: ' + error.message + '\n\nPlease try again or contact support.');
        this.disabled = false;
        this.textContent = 'Place Order (Pay on Delivery)';
      });
    });
  </script>
</body>
</html>
