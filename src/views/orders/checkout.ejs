<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> | GoCotano</title>
  <link rel="stylesheet" href="/css/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= process.env.GOOGLE_MAPS_API_KEY || 'YOUR_API_KEY' %>&libraries=places"></script>
  <script src="https://www.paypal.com/sdk/js?client-id=<%= process.env.PAYPAL_CLIENT_ID || 'YOUR_CLIENT_ID' %>&currency=USD"></script>
</head>
<body>
  <%- include('../partials/header') %>

  <div class="container" style="max-width: 800px;">
    <h1 style="color: var(--primary-blue); margin-bottom: 2rem;">Checkout</h1>

    <div class="grid grid-2" style="gap: 2rem;">
      <!-- Delivery Details -->
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Delivery Details</h2>
        </div>
        <div class="card-body">
          <form id="checkout-form">
            <div class="form-group">
              <label class="form-label">Delivery Address</label>
              <input
                type="text"
                id="address-input"
                class="form-control"
                placeholder="Enter your delivery address"
                required
              >
              <input type="hidden" id="delivery-lat">
              <input type="hidden" id="delivery-lng">
            </div>

            <div class="form-group">
              <label class="form-label">Special Instructions (Optional)</label>
              <textarea
                class="form-control"
                rows="3"
                placeholder="e.g., Ring doorbell, Leave at door"
              ></textarea>
            </div>

            <div id="map" class="map-container" style="height: 250px; margin-bottom: 1rem;"></div>
          </form>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Order Summary</h2>
        </div>
        <div class="card-body">
          <div id="order-items"></div>

          <div style="border-top: 2px solid var(--primary-blue-lighter); padding-top: 1rem; margin-top: 1rem;">
            <div class="d-flex justify-between" style="margin-bottom: 0.5rem;">
              <span>Subtotal:</span>
              <span id="subtotal">$0.00</span>
            </div>
            <div class="d-flex justify-between" style="margin-bottom: 0.5rem;">
              <span>Delivery Fee:</span>
              <span>$5.00</span>
            </div>
            <div class="d-flex justify-between" style="font-size: 1.25rem; font-weight: 700; color: var(--primary-orange);">
              <span>Total:</span>
              <span id="total">$0.00</span>
            </div>
          </div>

          <div id="paypal-button-container" style="margin-top: 1.5rem;"></div>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script>
    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
    const restaurantId = localStorage.getItem('restaurantId');
    let map, marker;
    let deliveryLat, deliveryLng;

    // Initialize Google Maps
    function initMap() {
      const defaultLocation = { lat: 40.7128, lng: -74.0060 }; // New York
      map = new google.maps.Map(document.getElementById('map'), {
        center: defaultLocation,
        zoom: 13
      });

      marker = new google.maps.Marker({
        map: map,
        draggable: true
      });

      const input = document.getElementById('address-input');
      const autocomplete = new google.maps.places.Autocomplete(input);

      autocomplete.addListener('place_changed', () => {
        const place = autocomplete.getPlace();
        if (place.geometry) {
          map.setCenter(place.geometry.location);
          marker.setPosition(place.geometry.location);
          deliveryLat = place.geometry.location.lat();
          deliveryLng = place.geometry.location.lng();
          document.getElementById('delivery-lat').value = deliveryLat;
          document.getElementById('delivery-lng').value = deliveryLng;
        }
      });

      marker.addListener('dragend', (e) => {
        deliveryLat = e.latLng.lat();
        deliveryLng = e.latLng.lng();
        document.getElementById('delivery-lat').value = deliveryLat;
        document.getElementById('delivery-lng').value = deliveryLng;
      });
    }

    // Calculate order total
    function calculateTotal() {
      // In production, fetch actual menu item prices from server
      const subtotal = cartItems.reduce((sum, item) => {
        return sum + (item.quantity * 10); // Placeholder price
      }, 0);

      const deliveryFee = 5;
      const total = subtotal + deliveryFee;

      document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
      document.getElementById('total').textContent = `$${total.toFixed(2)}`;

      // Display order items
      const itemsHtml = cartItems.map(item => `
        <div class="d-flex justify-between" style="margin-bottom: 0.5rem;">
          <span>${item.quantity}x Item #${item.menuItemId}</span>
          <span>$${(item.quantity * 10).toFixed(2)}</span>
        </div>
      `).join('');
      document.getElementById('order-items').innerHTML = itemsHtml;

      return total;
    }

    // Initialize PayPal
    const total = calculateTotal();

    paypal.Buttons({
      createOrder: function(data, actions) {
        const address = document.getElementById('address-input').value;
        const lat = document.getElementById('delivery-lat').value;
        const lng = document.getElementById('delivery-lng').value;

        if (!address || !lat || !lng) {
          alert('Please enter a delivery address');
          return;
        }

        return actions.order.create({
          purchase_units: [{
            amount: {
              value: total.toFixed(2)
            }
          }]
        });
      },
      onApprove: function(data, actions) {
        return actions.order.capture().then(function(details) {
          // Create order in backend
          fetch('/orders/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              restaurantId: parseInt(restaurantId),
              items: cartItems,
              deliveryAddress: document.getElementById('address-input').value,
              deliveryLat: parseFloat(document.getElementById('delivery-lat').value),
              deliveryLng: parseFloat(document.getElementById('delivery-lng').value),
              paymentId: details.id
            })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              localStorage.removeItem('cartItems');
              localStorage.removeItem('restaurantId');
              alert('Order placed successfully! Order #' + data.orderNumber);
              window.location.href = '/orders/' + data.orderId;
            }
          });
        });
      },
      onError: function(err) {
        console.error('PayPal error:', err);
        alert('Payment failed. Please try again.');
      }
    }).render('#paypal-button-container');

    // Initialize map on load
    initMap();
  </script>
</body>
</html>
