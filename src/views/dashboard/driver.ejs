<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> | GoCotano</title>
  <link rel="stylesheet" href="/css/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
</head>
<body>
  <%- include('../partials/header') %>

  <div class="container">
    <h1 style="color: var(--primary-blue); margin-bottom: 2rem;">Driver Dashboard</h1>

    <!-- Stats -->
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-value"><%= stats.totalDeliveries %></div>
        <div class="stat-label">Total Deliveries</div>
      </div>
      <div class="stat-card">
        <div class="stat-value"><%= stats.activeDeliveries %></div>
        <div class="stat-label">Active Deliveries</div>
      </div>
      <div class="stat-card">
        <div class="stat-value">₱<%= ((stats.earnings._sum.totalAmount || 0) * 0.1).toFixed(2) %></div>
        <div class="stat-label">Earnings (10%)</div>
      </div>
    </div>

    <!-- Available Orders -->
    <% if (availableOrders && availableOrders.length > 0) { %>
      <div class="card" style="margin-bottom: 2rem;">
        <div class="card-header">
          <h2 class="card-title">Available Deliveries</h2>
        </div>
        <div class="card-body">
          <% availableOrders.forEach(order => { %>
            <div class="card" style="margin-bottom: 1rem; border: 2px solid var(--primary-orange);">
              <h3 style="color: var(--primary-blue);">Order #<%= order.orderNumber %></h3>
              <p><strong>From:</strong> <%= order.restaurant.name %></p>
              <p><strong>To:</strong> <%= order.deliveryAddress %></p>
              <p><strong>Amount:</strong> ₱<%= order.totalAmount.toFixed(2) %></p>
              <button class="btn btn-primary" data-action="accept" data-order-id="<%= order.id %>">
                Accept Delivery
              </button>
            </div>
          <% }); %>
        </div>
      </div>
    <% } %>

    <!-- Current Deliveries -->
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">My Deliveries</h2>
      </div>
      <div class="card-body">
        <% if (orders && orders.length > 0) { %>
          <% orders.forEach(order => { %>
            <div class="card" style="margin-bottom: 1rem;">
              <div class="d-flex justify-between align-center">
                <div>
                  <h3 style="color: var(--primary-blue);">Order #<%= order.orderNumber %></h3>
                  <p><strong>From:</strong> <%= order.restaurant.name %></p>
                  <p><strong>To:</strong> <%= order.deliveryAddress %></p>
                  <span class="badge badge-<%= order.status === 'DELIVERED' ? 'success' : 'primary' %>">
                    <%= order.status %>
                  </span>
                </div>
                <div style="text-align: right;">
                  <div style="font-size: 1.25rem; font-weight: 700;">
                    ₱<%= order.totalAmount.toFixed(2) %>
                  </div>
                  <% if (order.status === 'READY') { %>
                    <button class="btn btn-primary mt-2" data-action="start" data-order-id="<%= order.id %>">
                      Start Delivery
                    </button>
                  <% } else if (order.status === 'OUT_FOR_DELIVERY') { %>
                    <button class="btn btn-primary mt-2" data-action="complete" data-order-id="<%= order.id %>">
                      Complete
                    </button>
                  <% } %>
                </div>
              </div>
            </div>
          <% }); %>
        <% } else { %>
          <p style="text-align: center; color: var(--gray); padding: 2rem;">
            No active deliveries.
          </p>
        <% } %>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script>
    // Event delegation for all button clicks
    document.addEventListener('DOMContentLoaded', function() {
      document.body.addEventListener('click', function(e) {
        const button = e.target.closest('[data-action]');
        if (!button) return;

        const action = button.dataset.action;
        const orderId = parseInt(button.dataset.orderId);

        if (action === 'accept') {
          acceptDelivery(orderId, button);
        } else if (action === 'start') {
          startDelivery(orderId, button);
        } else if (action === 'complete') {
          completeDelivery(orderId, button);
        }
      });
    });

    async function acceptDelivery(orderId, button) {
      if (!confirm('Accept this delivery?')) {
        return;
      }

      button.disabled = true;
      button.textContent = 'Accepting...';

      try {
        const response = await fetch('/driver/accept-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId })
        });

        const data = await response.json();

        if (data.success) {
          showToast('Delivery accepted! You can now start the delivery.', 'success');
          setTimeout(() => location.reload(), 1500);
        } else {
          showToast(data.error || 'Failed to accept delivery', 'error');
          button.disabled = false;
          button.textContent = 'Accept Delivery';
        }
      } catch (error) {
        console.error('Accept delivery error:', error);
        showToast('Failed to accept delivery. Please try again.', 'error');
        button.disabled = false;
        button.textContent = 'Accept Delivery';
      }
    }

    async function startDelivery(orderId, button) {
      if (!confirm('Start this delivery?')) {
        return;
      }

      button.disabled = true;
      button.textContent = 'Starting...';

      try {
        const response = await fetch('/orders/update-status', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId, status: 'OUT_FOR_DELIVERY' })
        });

        const data = await response.json();

        if (data.success) {
          showToast('Delivery started!', 'success');
          setTimeout(() => location.reload(), 1500);
        } else {
          showToast('Failed to start delivery', 'error');
          button.disabled = false;
          button.textContent = 'Start Delivery';
        }
      } catch (error) {
        console.error('Start delivery error:', error);
        showToast('Failed to start delivery. Please try again.', 'error');
        button.disabled = false;
        button.textContent = 'Start Delivery';
      }
    }

    async function completeDelivery(orderId, button) {
      if (!confirm('Mark this delivery as completed?')) {
        return;
      }

      button.disabled = true;
      button.textContent = 'Completing...';

      try {
        const response = await fetch('/driver/complete-delivery', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId })
        });

        const data = await response.json();

        if (data.success) {
          showToast('Delivery completed! Earnings updated.', 'success');
          setTimeout(() => location.reload(), 1500);
        } else {
          showToast('Failed to complete delivery', 'error');
          button.disabled = false;
          button.textContent = 'Complete';
        }
      } catch (error) {
        console.error('Complete delivery error:', error);
        showToast('Failed to complete delivery. Please try again.', 'error');
        button.disabled = false;
        button.textContent = 'Complete';
      }
    }

    function showToast(message, type) {
      const toast = document.createElement('div');
      toast.className = `alert alert-${type === 'success' ? 'success' : 'error'}`;
      toast.textContent = message;
      toast.style.position = 'fixed';
      toast.style.top = '20px';
      toast.style.right = '20px';
      toast.style.zIndex = '10000';
      toast.style.minWidth = '300px';
      toast.style.animation = 'slideInRight 0.3s ease';

      document.body.appendChild(toast);

      setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        toast.style.transition = 'all 0.3s ease';
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
  </script>

  <style>
    @keyframes slideInRight {
      from {
        opacity: 0;
        transform: translateX(100%);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
  </style>
</body>
</html>
